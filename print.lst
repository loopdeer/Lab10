


ARM Macro Assembler    Page 1 


    1 00000000         ; Print.s
    2 00000000         ; Student names: change this to your names or look very 
                       silly
    3 00000000         ; Last modification date: change this to the last modifi
                       cation date or look very silly
    4 00000000         ; Runs on LM4F120 or TM4C123
    5 00000000         ; EE319K lab 7 device driver for any LCD
    6 00000000         ;
    7 00000000         ; As part of Lab 7, students need to implement these LCD
                       _OutDec and LCD_OutFix
    8 00000000         ; This driver assumes two low-level LCD functions
    9 00000000         ; ST7735_OutChar   outputs a single 8-bit ASCII characte
                       r
   10 00000000         ; ST7735_OutString outputs a null-terminated string 
   11 00000000         
   12 00000000                 IMPORT           ST7735_OutChar
   13 00000000                 IMPORT           ST7735_OutString
   14 00000000                 EXPORT           LCD_OutDec
   15 00000000                 EXPORT           LCD_OutFix
   16 00000000         
   17 00000000                 AREA             DATA, ALIGN=2 ;
   18 00000000 00 00 00 
              00 00 00 outfix  SPACE            6           ;
   19 00000006         
   20 00000006                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   21 00000000                 THUMB
   22 00000000         
   23 00000000         
   24 00000000         
   25 00000000         ;-----------------------LCD_OutDec----------------------
                       -
   26 00000000         ; Output a 32-bit number in unsigned decimal format
   27 00000000         ; Input: R0 (call by value) 32-bit unsigned number
   28 00000000         ; Output: none
   29 00000000         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   30 00000000 00000000 
                       n       EQU              0           ; binding
   31 00000000         LCD_OutDec
   32 00000000 B501            PUSH{LR,         R0}         ; allocation
   33 00000002 280A            CMP              R0, #10     ;
   34 00000004 D314            BLO              base        ;
   35 00000006 F04F 020A       MOV              R2, #10     ;
   36 0000000A FBB0 F0F2       UDIV             R0, R0, R2  ;
   37 0000000E F7FF FFFE       BL               LCD_OutDec  ;
   38 00000012 9800            LDR              R0, [SP, #n] ; access
   39 00000014 F04F 030A       MOV              R3, #10     ;
   40 00000018 FBB0 F2F3       UDIV             R2, R0, R3  ;
   41 0000001C FB02 F103       MUL              R1, R2, R3  ;
   42 00000020 EBA0 0101       SUB              R1, R0, R1  ;
   43 00000024 4608            MOV              R0, R1      ;
   44 00000026 F100 0030       ADD              R0, #0x30   ;
   45 0000002A F7FF FFFE       BL               ST7735_OutChar
   46 0000002E E003            B                done        ;
   47 00000030 F100 0030 
                       base    ADD              R0, #0x30   ;
   48 00000034 F7FF FFFE       BL               ST7735_OutChar
   49 00000038 BD01    done    POP{PC,          R0}         ; deallocation



ARM Macro Assembler    Page 2 


   50 0000003A         
   51 0000003A         ; BX  LR
   52 0000003A         ;* * * * * * * * End of LCD_OutDec * * * * * * * *
   53 0000003A         
   54 0000003A         ; -----------------------LCD _OutFix--------------------
                       --
   55 0000003A         ; Output characters to LCD display in fixed-point format
                       
   56 0000003A         ; unsigned decimal, resolution 0.001, range 0.000 to 9.9
                       99
   57 0000003A         ; Inputs:  R0 is an unsigned 32-bit number
   58 0000003A         ; Outputs: none
   59 0000003A         ; E.g., R0=0,    then output "0.000 "
   60 0000003A         ;       R0=3,    then output "0.003 "
   61 0000003A         ;       R0=89,   then output "0.089 "
   62 0000003A         ;       R0=123,  then output "0.123 "
   63 0000003A         ;       R0=9999, then output "9.999 "
   64 0000003A         ;       R0>9999, then output "*.*** "
   65 0000003A         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   66 0000003A         
   67 0000003A 00002710 
                       MAX     EQU              10000       ; lots of binding
   68 0000003A 00000005 
                       StartIndex
                               EQU              5           ;
   69 0000003A 00000000 
                       num     EQU              0           ;
   70 0000003A 00000004 
                       index   EQU              4           ;
   71 0000003A 00000008 
                       pointer EQU              8           ;
   72 0000003A 0000002A 
                       star    EQU              0x2A        ;
   73 0000003A 0000002E 
                       dot     EQU              0x2E        ; 
   74 0000003A 2A 2E 2A 
              2A 2A 00 OverArr DCB              star, dot, star, star, star, 0 
                                                            ; Array
   75 00000040         
   76 00000040         LCD_OutFix
   77 00000040 B501            PUSH{LR,         R0}         ; (make sure we can
                                                             exit LCD_OutFix)
   78 00000042 F04F 0105       MOV              R1, #StartIndex ; R1 is the cur
                                                            rent index of the a
                                                            rray, starts at the
                                                             last index
   79 00000046 4A2E            LDR              R2, =outfix ; R2 is the pointer
                                                             to the index of th
                                                            e array, starts at 
                                                            the last index
   80 00000048 F04F 0301       MOV              R3, #1      ;
   81 0000004C FB03 F301       MUL              R3, R1      ;
   82 00000050 441A            ADD              R2, R3      ; move the pointer 
                                                            to the last index
   83 00000052 F242 7310       MOV              R3, #MAX    ; check if N >= 100
                                                            00 and if it is ski
                                                            p and put *.***;
   84 00000056 4298            CMP              R0, R3      ;



ARM Macro Assembler    Page 3 


   85 00000058 D246            BHS              Over        ;
   86 0000005A F000 F801       BL               LCD_OF      ; Go to the helper 
                                                            function thing
   87 0000005E E04B            B                OS2         ; When we return, t
                                                            he array will be fi
                                                            lled so go to the e
                                                            nd and OutputString
                                                            
   88 00000060         ;LCD_OF is a "mini internal function helper thing". Esse
                       ntially it is where the recursion actually occurs. Diffe
                       rence between this and
   89 00000060         ;the normal OutFix is that it takes in two additional in
                       puts, the index to which the value is to be stored in th
                       e array, and a pointer to that index
   90 00000060         ;The end result of LCD_OF is a filled 6 index array mean
                       t to symbolize the X.YZA;
   91 00000060 B507    LCD_OF  PUSH{LR,         R0, R1, R2} ;create 3 local var
                                                            iables:n, index, po
                                                            inter (allocation) 
                                                             
   92 00000062         
   93 00000062 2905            CMP              R1, #5      ; Check if this is 
                                                            the last index (ind
                                                            ex 5), if it is put
                                                             0 in for null
   94 00000064 D10A            BNE              Nonull      ;
   95 00000066 F04F 0000       MOV              R0, #0      ;
   96 0000006A 7010            STRB             R0, [R2]    ;
   97 0000006C 9800            LDR              R0, [SP, #num] ; this is an exa
                                                            mple of access
   98 0000006E F1A1 0101       SUB              R1, #1      ;
   99 00000072 F1A2 0201       SUB              R2, #1      ;
  100 00000076 F7FF FFF3       BL               LCD_OF      ; Pass in the previ
                                                            ous num, and decrem
                                                            ented index and poi
                                                            nter
  101 0000007A E03C            B                OS          ; When we inevitabl
                                                            y return, terminate
                                                             the iteration by s
                                                            kipping to the POP
  102 0000007C 2901    Nonull  CMP              R1, #1      ; check to see if t
                                                            he index is 1 (do w
                                                            e need a "."?)
  103 0000007E D10A            BNE              Nodot       ; 
  104 00000080 F04F 002E       MOV              R0, #dot    ;
  105 00000084 7010            STRB             R0, [R2]    ; store a "." into 
                                                            the array
  106 00000086 9800            LDR              R0, [SP, #num] ; pass along the
                                                             R0 from index 2's 
                                                            iteration
  107 00000088 F1A1 0101       SUB              R1, #1      ; decrement index
  108 0000008C F1A2 0201       SUB              R2, #1      ; decrement the poi
                                                            nter
  109 00000090 F7FF FFE6       BL               LCD_OF      ; recuression
  110 00000094 E02F            B                OS          ; When we return, t
                                                            erminate the iterat
                                                            ion (finish touches
                                                             such as deallocati
                                                            on)



ARM Macro Assembler    Page 4 


  111 00000096 2900    Nodot   CMP              R1, #0      ; if the first inde
                                                            x, its done and all
                                                             that is left is to
                                                             put the final valu
                                                            e in the array and 
                                                            go back up the recu
                                                            rsion chain (Store 
                                                            the remainders)
  112 00000098 D02A            BEQ              Finish      ;
  113 0000009A         
  114 0000009A 280A            CMP              R0, #10     ; if n < 10, store 
                                                            n in the resp. inde
                                                            x and pass 0 for nu
                                                            m
  115 0000009C D318            BLO              smol        ;
  116 0000009E F04F 030A       MOV              R3, #10     ;
  117 000000A2 FBB0 F0F3       UDIV             R0, R0, R3  ;
  118 000000A6 F1A1 0101       SUB              R1, #1      ; dec index *R1 cha
                                                            nged
  119 000000AA F1A2 0201       SUB              R2, #1      ; dec pointer *R2 c
                                                            hanged
  120 000000AE F7FF FFD7       BL               LCD_OF      ; LCD_OF(n/10, inde
                                                            x--, pointer--)
  121 000000B2         ;When we get back store the remainder in its respective 
                       index
  122 000000B2 9800            LDR              R0, [SP, #num] ;
  123 000000B4 F04F 030A       MOV              R3, #10     ;
  124 000000B8 FBB0 F1F3       UDIV             R1, R0, R3  ; R1 = num /10, *R1
                                                             is changed
  125 000000BC FB01 F103       MUL              R1, R3      ; R1 = (num / 10) *
                                                             10
  126 000000C0 EBA0 0001       SUB              R0, R1      ; R0 = remainder (n
                                                            um % 10)
  127 000000C4 F100 0030       ADD              R0, #0x30   ;
  128 000000C8 9901            LDR              R1, [SP, #index] ;
  129 000000CA 9A02            LDR              R2, [SP, #pointer] ;
  130 000000CC 7010            STRB             R0, [R2]    ;
  131 000000CE         ;SUB R1, #1; dec ind
  132 000000CE         ;SUB R2, #1; dec pointer
  133 000000CE E012            B                OS          ; After storing the
                                                             remainder, finish 
                                                            the iteration by po
                                                            pping
  134 000000D0         
  135 000000D0 F100 0030 
                       smol    ADD              R0, #0x30   ;
  136 000000D4 7010            STRB             R0, [R2]    ;
  137 000000D6 F04F 0000       MOV              R0, #0      ; pass along 0
  138 000000DA F1A1 0101       SUB              R1, #1      ; dec index
  139 000000DE F1A2 0201       SUB              R2, #1      ; dec pointer
  140 000000E2 F7FF FFBD       BL               LCD_OF      ; if it is already 
                                                            less than 10, furth
                                                            er nums will be 0
  141 000000E6 E006            B                OS          ; when we get back 
                                                            finish this iterati
                                                            on
  142 000000E8         Over                                 ;PUSH {LR, R0};
  143 000000E8 4806            LDR              R0, =OverArr ; if R0, is over 9
                                                            999 go ahead and ou



ARM Macro Assembler    Page 5 


                                                            tput *.***
  144 000000EA F7FF FFFE       BL               ST7735_OutString ;
  145 000000EE BD01            POP{PC,          R0}
  146 000000F0 F100 0030 
                       Finish  ADD              R0, #0x30   ; 
  147 000000F4 7010            STRB             R0, [R2]    ; store the last va
                                                            lue
  148 000000F6         ; LDR R0, =outfix; load address of array   
  149 000000F6         
  150 000000F6 BD07    OS      POP{PC,          R0, R1, R2} ; finishing touches
                                                             for each iteration
                                                             (terminate the ite
                                                            ration) (deallocati
                                                            on)
  151 000000F8 4801    OS2     LDR              R0, =outfix ; Actually output (
                                                            called from the ori
                                                            ginal LCD_OutFix)
  152 000000FA F7FF FFFE       BL               ST7735_OutString 
                                                            ; output array 
  153 000000FE BD01            POP{PC,          R0}         ; we done boys
  154 00000100         ; BX   LR
  155 00000100         
  156 00000100                 ALIGN
  157 00000100         ;* * * * * * * * End of LCD_OutFix * * * * * * * *
  158 00000100         
  159 00000100                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  160 00000100                 END                          ; end of file
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\print.
d -o.\print.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Luminary --predefine="__EVAL SETA 1" --list=.\print.lst Print.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 17 in file Print.s
   Uses
      None
Comment: DATA unused
outfix 00000000

Symbol: outfix
   Definitions
      At line 18 in file Print.s
   Uses
      At line 79 in file Print.s
      At line 151 in file Print.s

2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 20 in file Print.s
   Uses
      None
Comment: .text unused
Finish 000000F0

Symbol: Finish
   Definitions
      At line 146 in file Print.s
   Uses
      At line 112 in file Print.s
Comment: Finish used once
LCD_OF 00000060

Symbol: LCD_OF
   Definitions
      At line 91 in file Print.s
   Uses
      At line 86 in file Print.s
      At line 100 in file Print.s
      At line 109 in file Print.s
      At line 120 in file Print.s
      At line 140 in file Print.s

LCD_OutDec 00000000

Symbol: LCD_OutDec
   Definitions
      At line 31 in file Print.s
   Uses
      At line 14 in file Print.s
      At line 37 in file Print.s

LCD_OutFix 00000040

Symbol: LCD_OutFix
   Definitions
      At line 76 in file Print.s
   Uses
      At line 15 in file Print.s
Comment: LCD_OutFix used once
Nodot 00000096

Symbol: Nodot
   Definitions
      At line 111 in file Print.s
   Uses
      At line 103 in file Print.s
Comment: Nodot used once
Nonull 0000007C

Symbol: Nonull
   Definitions
      At line 102 in file Print.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 94 in file Print.s
Comment: Nonull used once
OS 000000F6

Symbol: OS
   Definitions
      At line 150 in file Print.s
   Uses
      At line 101 in file Print.s
      At line 110 in file Print.s
      At line 133 in file Print.s
      At line 141 in file Print.s

OS2 000000F8

Symbol: OS2
   Definitions
      At line 151 in file Print.s
   Uses
      At line 87 in file Print.s
Comment: OS2 used once
Over 000000E8

Symbol: Over
   Definitions
      At line 142 in file Print.s
   Uses
      At line 85 in file Print.s
Comment: Over used once
OverArr 0000003A

Symbol: OverArr
   Definitions
      At line 74 in file Print.s
   Uses
      At line 143 in file Print.s
Comment: OverArr used once
base 00000030

Symbol: base
   Definitions
      At line 47 in file Print.s
   Uses
      At line 34 in file Print.s
Comment: base used once
done 00000038

Symbol: done
   Definitions
      At line 49 in file Print.s
   Uses
      At line 46 in file Print.s
Comment: done used once
smol 000000D0

Symbol: smol
   Definitions
      At line 135 in file Print.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 115 in file Print.s
Comment: smol used once
14 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

MAX 00002710

Symbol: MAX
   Definitions
      At line 67 in file Print.s
   Uses
      At line 83 in file Print.s
Comment: MAX used once
StartIndex 00000005

Symbol: StartIndex
   Definitions
      At line 68 in file Print.s
   Uses
      At line 78 in file Print.s
Comment: StartIndex used once
dot 0000002E

Symbol: dot
   Definitions
      At line 73 in file Print.s
   Uses
      At line 74 in file Print.s
      At line 104 in file Print.s

index 00000004

Symbol: index
   Definitions
      At line 70 in file Print.s
   Uses
      At line 128 in file Print.s
Comment: index used once
n 00000000

Symbol: n
   Definitions
      At line 30 in file Print.s
   Uses
      At line 38 in file Print.s
Comment: n used once
num 00000000

Symbol: num
   Definitions
      At line 69 in file Print.s
   Uses
      At line 97 in file Print.s
      At line 106 in file Print.s
      At line 122 in file Print.s

pointer 00000008

Symbol: pointer
   Definitions
      At line 71 in file Print.s
   Uses
      At line 129 in file Print.s
Comment: pointer used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

star 0000002A

Symbol: star
   Definitions
      At line 72 in file Print.s
   Uses
      At line 74 in file Print.s
      At line 74 in file Print.s
      At line 74 in file Print.s
      At line 74 in file Print.s

8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

ST7735_OutChar 00000000

Symbol: ST7735_OutChar
   Definitions
      At line 12 in file Print.s
   Uses
      At line 45 in file Print.s
      At line 48 in file Print.s

ST7735_OutString 00000000

Symbol: ST7735_OutString
   Definitions
      At line 13 in file Print.s
   Uses
      At line 144 in file Print.s
      At line 152 in file Print.s

2 symbols
359 symbols in table
